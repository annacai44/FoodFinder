{"ast":null,"code":"import { FETCH_ALL, CREATE, UPDATE, DELETE } from '../constants/actionTypes'; // state must always be equal to something; the initial value of the state is [] bc there are no posts initially\n// based on the action type, the reducer returns either the state CHANGED by the action\n\nexport default (function () {\n  let posts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_ALL:\n      return action.payload;\n\n    case CREATE:\n      // we have to send over an array of posts; first we spread all the posts, and then we add a new post\n      return [...posts, action.payload];\n\n    case UPDATE:\n      // action.payload is the updated post. we are looking for the post that should be changed\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n\n    case DELETE:\n      return posts.filter(post => post._id != action.payload);\n\n    default:\n      return posts;\n  }\n});","map":{"version":3,"names":["FETCH_ALL","CREATE","UPDATE","DELETE","posts","action","type","payload","map","post","_id","filter"],"sources":["/Users/annacai/Desktop/material-ui-demo/client/src/reducers/posts.js"],"sourcesContent":["import { FETCH_ALL, CREATE, UPDATE, DELETE } from '../constants/actionTypes';\n\n// state must always be equal to something; the initial value of the state is [] bc there are no posts initially\n// based on the action type, the reducer returns either the state CHANGED by the action\nexport default (posts = [], action) => {\n    switch (action.type) {\n        case FETCH_ALL:\n            return action.payload;\n        case CREATE:\n            // we have to send over an array of posts; first we spread all the posts, and then we add a new post\n            return [...posts, action.payload];\n        case UPDATE:\n            // action.payload is the updated post. we are looking for the post that should be changed\n            return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\n        case DELETE:\n            return posts.filter((post) => post._id != action.payload);\n        default:\n            return posts;\n    }\n}"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,0BAAlD,C,CAEA;AACA;;AACA,gBAAe,YAAwB;EAAA,IAAvBC,KAAuB,uEAAf,EAAe;EAAA,IAAXC,MAAW;;EACnC,QAAQA,MAAM,CAACC,IAAf;IACI,KAAKN,SAAL;MACI,OAAOK,MAAM,CAACE,OAAd;;IACJ,KAAKN,MAAL;MACI;MACA,OAAO,CAAC,GAAGG,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;IACJ,KAAKL,MAAL;MACI;MACA,OAAOE,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAWA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeG,GAA5B,GAAkCL,MAAM,CAACE,OAAzC,GAAmDE,IAAxE,CAAP;;IACJ,KAAKN,MAAL;MACI,OAAOC,KAAK,CAACO,MAAN,CAAcF,IAAD,IAAUA,IAAI,CAACC,GAAL,IAAYL,MAAM,CAACE,OAA1C,CAAP;;IACJ;MACI,OAAOH,KAAP;EAZR;AAcH,CAfD"},"metadata":{},"sourceType":"module"}