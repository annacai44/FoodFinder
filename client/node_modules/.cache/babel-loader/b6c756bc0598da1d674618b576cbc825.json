{"ast":null,"code":"import * as api from '../api';\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes'; // Action Creators: functions that return actions\n// action is an OBJECT that has a TYPE and a PAYLOAD\n// redux thunk allows us to specify an additional arrow function; we need to use it because we're dealing with async logic\n// this action getPosts gets dispatched in App.js; after it gets dispatched, we immediately go to the Posts reducer\n// and handle the logic of fetching all posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    // we first get the response from the API, then we destructure the response to just get the data object\n    // data represents the posts\n    const {\n      data\n    } = await api.fetchPosts(); // dispatch an action from the data from the backend\n\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"names":["api","FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","getPosts","dispatch","data","fetchPosts","type","payload","err","console","log","createPost","post","updatePost","id","deletePost","likePost"],"sources":["/Users/annacai/Desktop/material-ui-demo/client/src/actions/posts.js"],"sourcesContent":["import * as api from '../api';\nimport { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\n\n// Action Creators: functions that return actions\n// action is an OBJECT that has a TYPE and a PAYLOAD\n// redux thunk allows us to specify an additional arrow function; we need to use it because we're dealing with async logic\n\n// this action getPosts gets dispatched in App.js; after it gets dispatched, we immediately go to the Posts reducer\n// and handle the logic of fetching all posts\nexport const getPosts = () => async (dispatch) => {\n    try {\n        // we first get the response from the API, then we destructure the response to just get the data object\n        // data represents the posts\n        const { data } = await api.fetchPosts();\n        // dispatch an action from the data from the backend\n        dispatch({ type: FETCH_ALL, payload: data });\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nexport const createPost = (post) => async (dispatch) => {\n    try {\n        const { data } = await api.createPost(post);\n        dispatch({ type: CREATE, payload: data });\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nexport const updatePost = (id, post) => async (dispatch) => {\n    try {\n       const { data } = await api.updatePost(id, post);\n       dispatch({ type: UPDATE, payload: data });\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nexport const deletePost = (id) => async (dispatch) => {\n    try {\n        await api.deletePost(id);\n        dispatch({ type: DELETE, payload: id })\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nexport const likePost = (id) => async (dispatch) => {\n    try {\n        const { data } = await api.likePost(id);\n        dispatch({ type: LIKE, payload: data });\n     } catch (err) {\n         console.log(err);\n     }\n}"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,QAArB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,IAA5C,QAAwD,0BAAxD,C,CAEA;AACA;AACA;AAEA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;EAC9C,IAAI;IACA;IACA;IACA,MAAM;MAAEC;IAAF,IAAW,MAAMR,GAAG,CAACS,UAAJ,EAAvB,CAHA,CAIA;;IACAF,QAAQ,CAAC;MAAEG,IAAI,EAAET,SAAR;MAAmBU,OAAO,EAAEH;IAA5B,CAAD,CAAR;EACH,CAND,CAME,OAAOI,GAAP,EAAY;IACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACH;AACJ,CAVM;AAYP,OAAO,MAAMG,UAAU,GAAIC,IAAD,IAAU,MAAOT,QAAP,IAAoB;EACpD,IAAI;IACA,MAAM;MAAEC;IAAF,IAAW,MAAMR,GAAG,CAACe,UAAJ,CAAeC,IAAf,CAAvB;IACAT,QAAQ,CAAC;MAAEG,IAAI,EAAER,MAAR;MAAgBS,OAAO,EAAEH;IAAzB,CAAD,CAAR;EACH,CAHD,CAGE,OAAOI,GAAP,EAAY;IACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACH;AACJ,CAPM;AASP,OAAO,MAAMK,UAAU,GAAG,CAACC,EAAD,EAAKF,IAAL,KAAc,MAAOT,QAAP,IAAoB;EACxD,IAAI;IACD,MAAM;MAAEC;IAAF,IAAW,MAAMR,GAAG,CAACiB,UAAJ,CAAeC,EAAf,EAAmBF,IAAnB,CAAvB;IACAT,QAAQ,CAAC;MAAEG,IAAI,EAAEP,MAAR;MAAgBQ,OAAO,EAAEH;IAAzB,CAAD,CAAR;EACF,CAHD,CAGE,OAAOI,GAAP,EAAY;IACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACH;AACJ,CAPM;AASP,OAAO,MAAMO,UAAU,GAAID,EAAD,IAAQ,MAAOX,QAAP,IAAoB;EAClD,IAAI;IACA,MAAMP,GAAG,CAACmB,UAAJ,CAAeD,EAAf,CAAN;IACAX,QAAQ,CAAC;MAAEG,IAAI,EAAEN,MAAR;MAAgBO,OAAO,EAAEO;IAAzB,CAAD,CAAR;EACH,CAHD,CAGE,OAAON,GAAP,EAAY;IACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACH;AACJ,CAPM;AASP,OAAO,MAAMQ,QAAQ,GAAIF,EAAD,IAAQ,MAAOX,QAAP,IAAoB;EAChD,IAAI;IACA,MAAM;MAAEC;IAAF,IAAW,MAAMR,GAAG,CAACoB,QAAJ,CAAaF,EAAb,CAAvB;IACAX,QAAQ,CAAC;MAAEG,IAAI,EAAEL,IAAR;MAAcM,OAAO,EAAEH;IAAvB,CAAD,CAAR;EACF,CAHF,CAGG,OAAOI,GAAP,EAAY;IACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACH;AACL,CAPM"},"metadata":{},"sourceType":"module"}