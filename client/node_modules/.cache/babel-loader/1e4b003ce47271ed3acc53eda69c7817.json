{"ast":null,"code":"var _jsxFileName = \"/Users/annacai/Desktop/material-ui-demo/client/src/components/Form/Form.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from 'react-file-base64';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost, updatePost } from '../../actions/posts';\nimport useStyles from './styles';\n\nconst Form = _ref => {\n  let {\n    currentId,\n    setCurrentId\n  } = _ref;\n  // we only want the data for the updated post, not all the posts\n  const post = useSelector(state => currentId ? state.posts.find(p => p._id === currentId) : null); // setState does not merge an object; it overrides all of the old state. Therefore, when we call it, we must spread out our prev state using ...\n  // useState() creates a state for the component\n\n  const [postData, setPostData] = useState({\n    description: '',\n    location: '',\n    name: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const classes = useStyles();\n  const dispatch = useDispatch(); // this hook runs a function EVERY RENDER of the component; the component renders initially when it first loads and when the state changes\n  // useEffect() is a way to run code on every render\n\n  useEffect(() => {\n    if (post) {\n      setPostData(post);\n    }\n  }, [post]); // once the user submits, this function will send over a POST request with all the data the user typed in\n\n  const handleSubmit = e => {\n    // the default action of a form being submitted is to refresh the page, and this prevents this\n    e.preventDefault();\n\n    if (currentId) {\n      dispatch(updatePost(currentId, postData));\n    } else {\n      // if currentId is null, that means we are creating a post; currentId is only set when ... is clicked\n      // dispatch the action, which is the createPost function using all the data from our state\n      dispatch(createPost(postData));\n    }\n  };\n\n  const clear = () => {};\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, \"Post your leftover food!\"), /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    name: \"description\",\n    variant: \"outlined\",\n    label: \"Description of food\",\n    fullWidth: true,\n    value: postData.description,\n    onChange: e => setPostData({ ...postData,\n      description: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    name: \"location\",\n    variant: \"outlined\",\n    label: \"Location\",\n    fullWidth: true,\n    value: postData.location,\n    onChange: e => setPostData({ ...postData,\n      location: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    name: \"name\",\n    variant: \"outlined\",\n    label: \"Name/Organization\",\n    fullWidth: true,\n    value: postData.name,\n    onChange: e => setPostData({ ...postData,\n      name: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    name: \"tags\",\n    variant: \"outlined\",\n    label: \"Tags\",\n    fullWidth: true,\n    value: postData.tags,\n    onChange: e => setPostData({ ...postData,\n      tags: e.target.value.split(',')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FileBase, {\n    type: \"file\",\n    multiple: false,\n    onDone: _ref2 => {\n      let {\n        base64\n      } = _ref2;\n      return setPostData({ ...postData,\n        selectedFile: base64\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: classes.buttonSubmit,\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    type: \"submit\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    size: \"small\",\n    onClick: clear,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \"Clear\")));\n};\n\nexport default Form;","map":{"version":3,"names":["React","useState","useEffect","TextField","Button","Typography","Paper","FileBase","useDispatch","useSelector","createPost","updatePost","useStyles","Form","currentId","setCurrentId","post","state","posts","find","p","_id","postData","setPostData","description","location","name","tags","selectedFile","classes","dispatch","handleSubmit","e","preventDefault","clear","paper","root","form","target","value","split","fileInput","base64","buttonSubmit"],"sources":["/Users/annacai/Desktop/material-ui-demo/client/src/components/Form/Form.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from 'react-file-base64';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost, updatePost } from '../../actions/posts';\n\nimport useStyles from './styles';\n\nconst Form = ({ currentId, setCurrentId }) => {\n    // we only want the data for the updated post, not all the posts\n    const post = useSelector((state) => currentId ? state.posts.find((p => p._id === currentId)) : null);\n    // setState does not merge an object; it overrides all of the old state. Therefore, when we call it, we must spread out our prev state using ...\n    // useState() creates a state for the component\n    const [postData, setPostData] = useState({ description: '', location: '', name: '', tags: '', selectedFile: '' });\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    // this hook runs a function EVERY RENDER of the component; the component renders initially when it first loads and when the state changes\n    // useEffect() is a way to run code on every render\n    useEffect(() => {\n        if (post) {\n            setPostData(post);\n        }\n    }, [post]);\n\n    // once the user submits, this function will send over a POST request with all the data the user typed in\n    const handleSubmit = (e) => {\n        // the default action of a form being submitted is to refresh the page, and this prevents this\n        e.preventDefault();\n\n        if (currentId) {\n            dispatch(updatePost(currentId, postData));\n        } else {\n            // if currentId is null, that means we are creating a post; currentId is only set when ... is clicked\n            // dispatch the action, which is the createPost function using all the data from our state\n            dispatch(createPost(postData));\n        }\n    }\n\n    const clear = () => {\n\n    }\n\n    return (\n        <Paper className={classes.paper}>\n            <form autoComplete='off' noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n                <Typography variant='h6'>Post your leftover food!</Typography>\n                {/* 'value' is going to be stored in the state postData. Each object key is going to be a specific test field. */}\n                {/* onChange changes the value of the state field. */}\n                <TextField required name='description' variant='outlined' label='Description of food' fullWidth value={postData.description} onChange={(e) => setPostData({ ...postData, description: e.target.value })}/>\n                <TextField required name='location' variant='outlined' label='Location' fullWidth value={postData.location} onChange={(e) => setPostData({ ...postData, location: e.target.value })}/>\n                <TextField required name='name' variant='outlined' label='Name/Organization' fullWidth value={postData.name} onChange={(e) => setPostData({ ...postData, name: e.target.value })}/>\n                <TextField required name='tags' variant='outlined' label='Tags' fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })}/>\n                <div className={classes.fileInput}>\n                    <FileBase type='file' multiple={false} onDone={({base64}) => setPostData({ ...postData, selectedFile: base64 })}/>\n                </div>\n                <Button className={classes.buttonSubmit} variant='contained' color='primary' size='large' type='submit' fullWidth>Submit</Button>\n                <Button variant='contained' color='secondary' size='small' onClick={clear} fullWidth>Clear</Button>\n            </form>\n        </Paper>\n    )\n}\n\nexport default Form;"],"mappings":"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"},"metadata":{},"sourceType":"module"}