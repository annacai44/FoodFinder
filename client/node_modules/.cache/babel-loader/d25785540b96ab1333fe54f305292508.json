{"ast":null,"code":"var _jsxFileName = \"/Users/annacai/Desktop/material-ui-demo/client/src/components/Form/Form.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from 'react-file-base64';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost, updatePost } from '../../actions/posts';\nimport useStyles from './styles';\n\nconst Form = _ref => {\n  let {\n    currentId,\n    setCurrentId\n  } = _ref;\n  // setState does not merge an object; it overrides all of the old state. Therefore, when we call it, we must spread out our prev state using ...\n  // useState() creates a state for the component\n  const [postData, setPostData] = useState({\n    description: '',\n    location: '',\n    name: '',\n    tags: '',\n    selectedFile: ''\n  }); // we only want the data for the updated post, not all the posts\n\n  const post = useSelector(state => currentId ? state.posts.find(post => post._id === currentId) : null);\n  const classes = useStyles();\n  const dispatch = useDispatch(); // this hook runs a function EVERY RENDER of the component; the component renders initially when it first loads and when the state changes\n  // a way to run code on every render\n\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(null);\n    setPostData({\n      description: '',\n      location: '',\n      name: '',\n      tags: '',\n      selectedFile: ''\n    });\n  }; // once the user submits, this function will send over a POST request with all the data the user typed in\n\n\n  const handleSubmit = e => {\n    // the default action of a form being submitted is to refresh the page, and this prevents this\n    e.preventDefault();\n\n    if (currentId) {\n      dispatch(updatePost(currentId, postData));\n    } else {\n      dispatch(createPost(postData));\n    }\n\n    clear();\n  };\n\n  return (\n    /*#__PURE__*/\n    // <Paper className={classes.paper}>\n    React.createElement(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, \"Post your leftover food!\"), /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      name: \"description\",\n      variant: \"outlined\",\n      label: \"Description of food\",\n      fullWidth: true,\n      value: postData.description,\n      onChange: e => setPostData({ ...postData,\n        description: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      name: \"location\",\n      variant: \"outlined\",\n      label: \"Location\",\n      fullWidth: true,\n      value: postData.location,\n      onChange: e => setPostData({ ...postData,\n        location: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      name: \"name\",\n      variant: \"outlined\",\n      label: \"Name/Organization\",\n      fullWidth: true,\n      value: postData.name,\n      onChange: e => setPostData({ ...postData,\n        name: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      name: \"tags\",\n      variant: \"outlined\",\n      label: \"Tags\",\n      fullWidth: true,\n      value: postData.tags,\n      onChange: e => setPostData({ ...postData,\n        tags: e.target.value.split(',')\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.fileInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FileBase, {\n      type: \"file\",\n      multiple: false,\n      onDone: _ref2 => {\n        let {\n          base64\n        } = _ref2;\n        return setPostData({ ...postData,\n          selectedFile: base64\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: classes.buttonSubmit,\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"large\",\n      type: \"submit\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      size: \"small\",\n      onClick: clear,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, \"Clear\")) // </Paper>\n\n  );\n};\n\nexport default Form;","map":{"version":3,"names":["React","useState","useEffect","TextField","Button","Typography","Paper","FileBase","useDispatch","useSelector","createPost","updatePost","useStyles","Form","currentId","setCurrentId","postData","setPostData","description","location","name","tags","selectedFile","post","state","posts","find","_id","classes","dispatch","clear","handleSubmit","e","preventDefault","root","form","target","value","split","fileInput","base64","buttonSubmit"],"sources":["/Users/annacai/Desktop/material-ui-demo/client/src/components/Form/Form.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from 'react-file-base64';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPost, updatePost } from '../../actions/posts';\n\nimport useStyles from './styles';\n\nconst Form = ({ currentId, setCurrentId }) => {\n    // setState does not merge an object; it overrides all of the old state. Therefore, when we call it, we must spread out our prev state using ...\n    // useState() creates a state for the component\n    const [postData, setPostData] = useState({ description: '', location: '', name: '', tags: '', selectedFile: '' });\n\n    // we only want the data for the updated post, not all the posts\n    const post = useSelector((state) => currentId ? state.posts.find((post) => post._id === currentId) : null);\n\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    // this hook runs a function EVERY RENDER of the component; the component renders initially when it first loads and when the state changes\n    // a way to run code on every render\n    useEffect(() => {\n        if (post) setPostData(post);\n    }, [post]);\n\n    const clear = () => {\n        setCurrentId(null);\n        setPostData({ description: '', location: '', name: '', tags: '', selectedFile: '' });\n    }\n\n    // once the user submits, this function will send over a POST request with all the data the user typed in\n    const handleSubmit = (e) => {\n        // the default action of a form being submitted is to refresh the page, and this prevents this\n        e.preventDefault();\n\n        if (currentId) {\n            dispatch(updatePost(currentId, postData));\n        } else {\n            dispatch(createPost(postData));\n        }\n        clear();\n    }\n\n    return (\n        // <Paper className={classes.paper}>\n            <form autoComplete='off' noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n                <Typography variant='h6'>Post your leftover food!</Typography>\n                {/* 'value' is going to be stored in the state postData. Each object key is going to be a specific test field. */}\n                {/* onChange changes the value of the state field. */}\n                <TextField required name='description' variant='outlined' label='Description of food' fullWidth value={postData.description} onChange={(e) => setPostData({ ...postData, description: e.target.value })}/>\n                <TextField required name='location' variant='outlined' label='Location' fullWidth value={postData.location} onChange={(e) => setPostData({ ...postData, location: e.target.value })}/>\n                <TextField required name='name' variant='outlined' label='Name/Organization' fullWidth value={postData.name} onChange={(e) => setPostData({ ...postData, name: e.target.value })}/>\n                <TextField required name='tags' variant='outlined' label='Tags' fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })}/>\n                <div className={classes.fileInput}>\n                    <FileBase type='file' multiple={false} onDone={({base64}) => setPostData({ ...postData, selectedFile: base64 })}/>\n                </div>\n                <Button className={classes.buttonSubmit} variant='contained' color='primary' size='large' type='submit' fullWidth>Submit</Button>\n                <Button variant='contained' color='secondary' size='small' onClick={clear} fullWidth>Clear</Button>\n            </form>\n        // </Paper>\n    )\n}\n\nexport default Form;"],"mappings":"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"},"metadata":{},"sourceType":"module"}